📄 README.md — Version 2 (ReentrantLock / ReentrantReadWriteLock)
Ticket Selling System — Version 2 (ReentrantReadWriteLock Version)
📚 Overview
This project simulates a multi-threaded ticket selling system using explicit synchronization with ReentrantReadWriteLock.

It models real-world concurrent access to a shared TicketPool, where:

Vendors (Producers) add tickets.

Consumers (Customers) purchase tickets.

Writers modify the ticket pool (e.g., add special tickets).

Readers monitor the ticket availability.

This version replaces intrinsic synchronization (synchronized, wait, notifyAll) with explicit lock management (ReentrantReadWriteLock and Condition).

🏛 Architecture

Class	Responsibility
Ticket	Model class holding Ticket ID, Vendor Name, Event Name
TicketPool (interface)	Defines basic operations: addTicket, purchaseTicket, availableTickets
TicketPoolLock	Lock-based implementation using ReentrantReadWriteLock
Vendor	Adds normal tickets into the pool
Consumer	Purchases available tickets from the pool
Writer	Adds special VIP tickets into the pool
Reader	Periodically checks available ticket counts
SimulationManager	Starts and manages all threads
⚙️ Synchronization Mechanism

Mechanism	Purpose
ReentrantReadWriteLock	Separate locks for reading and writing to optimize concurrency
Condition (notFull, notEmpty)	Fine-grained control of producer and consumer waiting
writeLock is used by Vendor, Writer, and Consumer for adding and purchasing.

readLock is used by Reader to monitor available ticket counts safely.

🔥 How the System Works
Vendor adds 10 normal tickets (TICKET-1 to TICKET-10) to the ticket pool.

Writer adds 3 special tickets (SPECIAL-1, SPECIAL-2, SPECIAL-3).

Consumer buys tickets (normal or special) as soon as they are available.

Reader continuously checks and prints the number of available tickets.

Threads operate concurrently but safely using locks.

📈 Sample Output (Simplified)
yaml
Copy
Edit
Reader-Thread sees available tickets: 0
Vendor-Thread added TicketID: TICKET-1
Writer-Thread added TicketID: SPECIAL-1
Consumer-Thread purchased TicketID: TICKET-1
Vendor-Thread added TicketID: TICKET-2
Consumer-Thread purchased TicketID: SPECIAL-1
...
Consumer-Thread purchased TicketID: TICKET-10
✅ Vendor and Writer add tickets concurrently.
✅ Consumer purchases tickets based on FIFO availability.
✅ Reader monitors live ticket stock.

🧠 Real-World Analogy
An online ticket booking system where vendors post standard event tickets,
organizers offer special VIP tickets,
customers buy available tickets first-come-first-serve,
and system admins monitor ticket inventory live.

🛡 Key Strengths
Demonstrates fine-grained concurrency control using ReentrantReadWriteLock.

Allows multiple readers while exclusive access for writers.

Avoids race conditions and deadlocks.

Improves scalability under high concurrency compared to synchronized.

📚 Learning Outcomes
Using ReentrantReadWriteLock in Java for concurrent programming.

Using Condition objects for better producer-consumer coordination.

Managing shared resources (queues) safely across multiple threads.

Designing realistic multi-threaded applications.

🚀 How to Run
Ensure all .java files are placed under the package reentrantLockMethods.

Compile all classes.

Run SimulationManager.java.

Observe concurrent ticket production, consumption, modification, and monitoring.

📋 System Parameters

Parameter	Value
Ticket pool maximum capacity	5
Normal tickets added by Vendor	10
Special tickets added by Writer	3
Sleep times for each role	Vendor (300ms), Consumer (400ms), Writer (700ms), Reader (500ms)



